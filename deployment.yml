apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-config
data:
  init.sql: |
    CREATE TABLE IF NOT EXISTS items (
      id SERIAL PRIMARY KEY,
      text VARCHAR(255) NOT NULL,
      created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );
    INSERT INTO items (text) VALUES ('Primeiro item de teste GKE');

---

# ConfigMap para configurações gerais do Flask (substitui flask.env para variáveis não sensíveis)
apiVersion: v1
kind: ConfigMap
metadata:
  name: flask-config
data:
  FLASK_ENV: "production"

---

# Secret para credenciais do PostgreSQL (substitui db.env para variáveis sensíveis)
# IMPORTANTE: Você DEVE usar a codificação Base64 da sua senha REAL aqui!
apiVersion: v1
kind: Secret
metadata:
  name: postgres-credentials
type: Opaque
data:
  POSTGRES_USER: cG9zdGdyZXM= 
  POSTGRES_PASSWORD: c3VwZXJfc2VuaGE= # Base64 da sua senha real (Ex: "super_senha")
  POSTGRES_DB: cG9zdGdyZXM=    

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
  labels:
    app: postgres
spec:
  selector:
    matchLabels:
      app: postgres
  replicas: 1
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15
        ports:
        - containerPort: 5432
        env:
        # Carrega variáveis do Secret para o POSTGRES
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: POSTGRES_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: POSTGRES_DB
        volumeMounts:
        - mountPath: /docker-entrypoint-initdb.d
          name: db-init-script
      volumes:
      - name: db-init-script
        configMap:
          name: postgres-init-config
          items:
          - key: init.sql
            path: init.sql

---

apiVersion: v1
kind: Service
metadata:
  name: postgres-service
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-app-deployment
  labels:
    app: flask-app
spec:
  selector:
    matchLabels:
      app: flask-app
  replicas: 1
  template:
    metadata:
      labels:
        app: flask-app
    spec:
      containers:
      - name: flask-app
        image: caiofreires/todo-list-teste:latest
        ports:
        - containerPort: 5000
        
        # Carrega configurações não sensíveis do ConfigMap
        envFrom:
        - configMapRef:
            name: flask-config
        
        env:
        # DB_HOST (endereço de conexão)
        - name: DB_HOST
          value: "postgres-service"
        
        # Mapeamento explícito das chaves do Secret para o nome esperado pelo Flask (DB_USER, DB_PASS, DB_NAME)
        # ISSO CORRIGE O ERRO DE AUTENTICAÇÃO
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: POSTGRES_USER
        - name: DB_PASS
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: POSTGRES_PASSWORD
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: POSTGRES_DB

---

apiVersion: v1
kind: Service
metadata:
  name: flask-app-service
spec:
  selector:
    app: flask-app
  type: LoadBalancer 
  ports:
    - protocol: TCP
      port: 80 
      targetPort: 5000